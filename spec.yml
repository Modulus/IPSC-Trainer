openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/v2'
    description: Local development server
info:
  description: "IPSC training app for storing exercises, splits and descriptions of exercises with images"
  version: "1.0.0"
  title: "IPSC Trainer"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "ipsc.skaugeconsult.net"
#basePath: "/v1"
tags:
- name: Drill
  description: "Drill spesifications and instructions"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Training"
  description: "Everything about your drill definitions"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "DrillDetails"
  description: "Access Drill definition"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our drills"
    url: "http://swagger.io"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "Can only be done by existing user or admin"
      operationId: "createUser"
      responses: 
        default:
          description: "User created"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/User"
          application/xml:
            schema:
              $ref: "#components/schemas/User"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "Only for current logged in user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User updated"
        "400":
          description: "Invalid user!"
        "404":
          description: "User not found"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: "Jadda"
      operationId: "loginUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: "Successful login of user"
          headers:
            X-Rate-Limit:
              description: "Calls per hour allowed by the user"
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: "Date when token expires"
              schema:
                type: string
                #format: date-time
          content:
            application/json:
              schema:
                type: string
  /user/logout:
    post:
      tags:
        - "user"
      summary: "Logs current user out of the system"
      description: ""
      operationId: "logoutUser"
      responses:
        default:
          description: "Successful operation perfomed"
  /user/{name}:
    get:
      tags:
        - "user"
      summary: "Get user by name"
      operationId: "getUserByName"
      parameters:
      - name: "name"
        in: path
        description: "The user to fetch by name"
        required: true
        schema: 
          type: string
      responses:
        "200":
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "400":
          description: "Invalid username supplied!"
        "404":
          description: "User not found!"

    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "Only for current logged in user"
      parameters:
      - name: "name"
        in: path
        description: "The username to delete"
        required: true
        schema: 
          type: string
      responses:
        "400":
          description: "Invalid username"
        "404":
          description: "User not found"
  /drill/{drillId}:
    get:
      tags:
      - "drill"
      summary: "Get a drill from the database by id"
      description: ""
      operationId: "getDrillById"
      parameters:
      - in: "path"
        name: "drillId"
        description: "ID of drill to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drill"
            application/xml:
              schema:
                $ref: "#/components/schemas/Drill"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
      # security:
      # - drill_auth:
      #   - "read:drill"  
    delete:
      tags:
      - "drill"
      summary: "Delete an existing drill"
      description: ""
      operationId: "deleteDrill"
      parameters:
      - in: "path"
        name: drillId
        description: "Id of drill to delete"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "write:drill"
      #   - "read:drill"  
      #   - "delete:drill"     
  /drill:        
    get:
      tags:
      - "drill"
      summary: "Add a new drill to the database"
      description: ""
      operationId: "getDrills"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drill"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drill"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
      # security:
      # - drill_auth:
      #   - "read:drill"  
    post:
      tags:
      - "drill"
      summary: "Add a new drill to the database"
      description: ""
      operationId: "addDrill"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drill"
        description: "Drill object that needs to be added to the store"
        required: true
      responses:
        405:
          description: "Invalid input"
      # security:
      # - drill_auth:
      #   - "write:drill"
      #   - "read:drill"
    put:
      tags:
      - "drill"
      summary: "Update an existing drill"
      description: ""
      operationId: "updateDrill"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drill"
        description: "Drill object that needs to be added to the store"
        required: true
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "write:Drills"
      #   - "read:Drills"
  /drill/details/{drillDetailId}:
    get:
      tags:
      - "drilldetails"
      summary: "Add a new drill to the database"
      description: ""
      operationId: "getDrillDetailsById"
      parameters:
      - in: "path"
        name: "drillDetailId"
        description: "ID of drillDetails to return"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DrillDetails"  
            application/xml:
              schema:
                $ref: "#/components/schemas/DrillDetails"  
        405:
          description: "Invalid input"
      # security:
      # - drill_auth:
      #   - "read:drilldetails"  
    delete:
      tags:
      - "drilldetails"
      summary: "Delete an existing drill details"
      description: ""
      operationId: "deleteDrillDetails"
      parameters:
      - in: "path"
        name: drillDetailId
        description: "Drill id that needs to be deleted from the database"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "delete:DrillDetails"    
  /drill/details:        
    post:
      tags:
      - "drilldetails"
      summary: "Add a new drill to the database"
      description: ""
      operationId: "addDrillDetails"
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/DrillDetails"
        description: "DrillDetials object that needs to be added"
        required: true        
      responses:
        405:
          description: "Invalid input"
      # security:
      # - drill_auth:
      #   - "write:drilldetails"
      #   - "read:drilldetails"
    put:
      tags:
      - "drilldetails"
      summary: "Update an existing drill details"
      description: ""
      operationId: "updateDrillDetails"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DrillDetails"
        description: "Drill object that needs to be added to the store"
        required: true
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drill not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "write:DrillDetails"
      #   - "read:DrillDetails"
    
  /training:
    get:
      tags:
      - "training"
      summary: "Finds all trainings for current user"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "getAllTraining"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Training"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Training"
        "400":
          description: "Invalid tag value"
      # security:
      # - drill_auth:
      #   - "read:training"
    post:
      tags:
      - "training"
      summary: "Add a new training to the database"
      description: ""
      operationId: "addTraining"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Training"
        description: "Training details to add"
        required: true

      responses:
        405:
          description: "Invalid input"
      # security:
      # - drill_auth:
      #   - "write:training"
      #   - "read:training"
    put:
      tags:
      - "training"
      summary: "Update an existing training"
      description: ""
      operationId: "updateTraining"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Training"
        description: "Training object that needs to be added to the database"
        required: true
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Training not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "write:training"
      #   - "read:training"      

  /training/{traningId}:   
    get:
      tags:
      - "training"
      summary: "Find training by ID"
      description: "Returns a list of training"
      operationId: "getTrainingById"
      parameters:
      - name: "traningId"
        in: "path"
        description: "ID of training to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Training"
            application/xml:
              schema:
                $ref: "#/components/schemas/Training"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Training not found"
      # security:
      # - api_key: []           
    delete:
      tags:
      - "training"
      summary: "Delete an existing training"
      description: ""
      operationId: "deleteTraining"
      parameters:
      - name: "traningId"
        in: "path"
        description: "ID of training to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Training not found"
        405:
          description: "Validation exception"
      # security:
      # - drill_auth:
      #   - "write:training"
      #   - "read:training"      
      #   - "delete:training" 

security: 
  - bearerAuth: []
components:
  links: {}
  callbacks: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: decode_jwt_token
    # drill_auth:
    #   type: oauth2
    #   flows:
    #     implicit:
    #       authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    #       scopes:
    #         'write:drill': modify drills in your account
    #         'read:drill': read your drill
    #         "admin:drill": "admin access to drills in your account"
    #   training_auth:    
    #     type: oauth2
    #     flows:
    #       implicit:
    #         authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    #         scopes:
    #           "write:training": "Create drills in your account"
    #           "read:training": "Read training in your account"     
    #           "admin:training": "Admin access to traning in your account"        
    #   drill_detail_auth:    
    #     type: oauth2
    #     flows:
    #       implicit:
    #         authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    #         scopes:
    #           "write:drilldetail": "Create drilldetails in your account"
    #           "read:drilldetail":  "Read drilldetails in your account"    
    #           "admin:drilldetail":   "Admin access to drilldetails in your account"              
    api_key:
      type: apiKey
      name: api_key
      in: header
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Training:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        drillsDetails:
          type: array
          items: 
            $ref: '#/components/schemas/DrillDetails'
        drillDate:
          type: "string"
          #format: "date-time"
      xml:
        name: "Traning"
    DrillDetails:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
        drills:
          type: array
          xml:
            name: drills
            wrapped: true
          items:
            $ref: '#/components/schemas/Drill'
        splits:
          type: array
          items:
            type: number
            format: double
      xml:
        name: "DrillDetails"
    Drill:
      type: "object"
      properties:
        id: 
          type: "integer"
          format: "int64"
        name: 
          type: "string"
        targetAmount: 
          type: "integer"
          format: "int64"
        description:
          type: "string"
          description: "Description of the drill"
        image:
          type: "string"
          description: "Path to image"  
      xml:
        name: "Drill"
    UserLogin:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
          format: "password"
        phone:
          type: "string"
        userStatus:
          type: "integer"
          format: "int32"
          description: "User Status"
        active:
          type: "boolean"
          default: false
      xml:
        name: "User"
    
    ApiResponse:
      type: "object"
      properties:
      
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

